
ATmegaBOOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d4  00001c00  00001c00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001fd4  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  00800062  00800062  0000046a  2**0
                  ALLOC
  3 .debug_aranges 00000048  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000aa  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c0  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024a  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d7  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b5  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f4  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001c00 <__vectors>:
    1c00:	12 c0       	rjmp	.+36     	; 0x1c26 <__ctors_end>
    1c02:	2c c0       	rjmp	.+88     	; 0x1c5c <__bad_interrupt>
    1c04:	2b c0       	rjmp	.+86     	; 0x1c5c <__bad_interrupt>
    1c06:	2a c0       	rjmp	.+84     	; 0x1c5c <__bad_interrupt>
    1c08:	29 c0       	rjmp	.+82     	; 0x1c5c <__bad_interrupt>
    1c0a:	28 c0       	rjmp	.+80     	; 0x1c5c <__bad_interrupt>
    1c0c:	27 c0       	rjmp	.+78     	; 0x1c5c <__bad_interrupt>
    1c0e:	26 c0       	rjmp	.+76     	; 0x1c5c <__bad_interrupt>
    1c10:	25 c0       	rjmp	.+74     	; 0x1c5c <__bad_interrupt>
    1c12:	24 c0       	rjmp	.+72     	; 0x1c5c <__bad_interrupt>
    1c14:	23 c0       	rjmp	.+70     	; 0x1c5c <__bad_interrupt>
    1c16:	22 c0       	rjmp	.+68     	; 0x1c5c <__bad_interrupt>
    1c18:	21 c0       	rjmp	.+66     	; 0x1c5c <__bad_interrupt>
    1c1a:	20 c0       	rjmp	.+64     	; 0x1c5c <__bad_interrupt>
    1c1c:	1f c0       	rjmp	.+62     	; 0x1c5c <__bad_interrupt>
    1c1e:	1e c0       	rjmp	.+60     	; 0x1c5c <__bad_interrupt>
    1c20:	1d c0       	rjmp	.+58     	; 0x1c5c <__bad_interrupt>
    1c22:	1c c0       	rjmp	.+56     	; 0x1c5c <__bad_interrupt>
    1c24:	1b c0       	rjmp	.+54     	; 0x1c5c <__bad_interrupt>

00001c26 <__ctors_end>:
    1c26:	11 24       	eor	r1, r1
    1c28:	1f be       	out	0x3f, r1	; 63
    1c2a:	cf e5       	ldi	r28, 0x5F	; 95
    1c2c:	d4 e0       	ldi	r29, 0x04	; 4
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	cd bf       	out	0x3d, r28	; 61

00001c32 <__do_copy_data>:
    1c32:	10 e0       	ldi	r17, 0x00	; 0
    1c34:	a0 e6       	ldi	r26, 0x60	; 96
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e4 ed       	ldi	r30, 0xD4	; 212
    1c3a:	ff e1       	ldi	r31, 0x1F	; 31
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <.do_copy_data_start>

00001c3e <.do_copy_data_loop>:
    1c3e:	05 90       	lpm	r0, Z+
    1c40:	0d 92       	st	X+, r0

00001c42 <.do_copy_data_start>:
    1c42:	a2 36       	cpi	r26, 0x62	; 98
    1c44:	b1 07       	cpc	r27, r17
    1c46:	d9 f7       	brne	.-10     	; 0x1c3e <.do_copy_data_loop>

00001c48 <__do_clear_bss>:
    1c48:	11 e0       	ldi	r17, 0x01	; 1
    1c4a:	a2 e6       	ldi	r26, 0x62	; 98
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <.do_clear_bss_start>

00001c50 <.do_clear_bss_loop>:
    1c50:	1d 92       	st	X+, r1

00001c52 <.do_clear_bss_start>:
    1c52:	aa 36       	cpi	r26, 0x6A	; 106
    1c54:	b1 07       	cpc	r27, r17
    1c56:	e1 f7       	brne	.-8      	; 0x1c50 <.do_clear_bss_loop>
    1c58:	4a d0       	rcall	.+148    	; 0x1cee <main>
    1c5a:	ba c1       	rjmp	.+884    	; 0x1fd0 <_exit>

00001c5c <__bad_interrupt>:
    1c5c:	d1 cf       	rjmp	.-94     	; 0x1c00 <__vectors>

00001c5e <putch>:
}

void putch(char ch)
{
  /* m8 */
  while (!(inb(UCSRA) & _BV(UDRE)));
    1c5e:	5d 9b       	sbis	0x0b, 5	; 11
    1c60:	fe cf       	rjmp	.-4      	; 0x1c5e <putch>
  outb(UDR,ch);
    1c62:	8c b9       	out	0x0c, r24	; 12
}
    1c64:	08 95       	ret

00001c66 <getch>:

char getch(void)
{
    1c66:	ef 92       	push	r14
    1c68:	ff 92       	push	r15
    1c6a:	0f 93       	push	r16
    1c6c:	1f 93       	push	r17
    1c6e:	ee 24       	eor	r14, r14
    1c70:	ff 24       	eor	r15, r15
    1c72:	87 01       	movw	r16, r14
    1c74:	13 c0       	rjmp	.+38     	; 0x1c9c <getch+0x36>
  /* m8 */
	uint32_t count = 0;
  while(!(inb(UCSRA) & _BV(RXC))) {
		/* HACKME:: here is a good place to count times*/
		count++;
    1c76:	08 94       	sec
    1c78:	e1 1c       	adc	r14, r1
    1c7a:	f1 1c       	adc	r15, r1
    1c7c:	01 1d       	adc	r16, r1
    1c7e:	11 1d       	adc	r17, r1
		if (count > MAX_TIME_COUNT)
    1c80:	81 e8       	ldi	r24, 0x81	; 129
    1c82:	e8 16       	cp	r14, r24
    1c84:	84 e8       	ldi	r24, 0x84	; 132
    1c86:	f8 06       	cpc	r15, r24
    1c88:	8e e1       	ldi	r24, 0x1E	; 30
    1c8a:	08 07       	cpc	r16, r24
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	18 07       	cpc	r17, r24
    1c90:	28 f0       	brcs	.+10     	; 0x1c9c <getch+0x36>
			app_start();
    1c92:	e0 91 62 00 	lds	r30, 0x0062
    1c96:	f0 91 63 00 	lds	r31, 0x0063
    1c9a:	09 95       	icall

char getch(void)
{
  /* m8 */
	uint32_t count = 0;
  while(!(inb(UCSRA) & _BV(RXC))) {
    1c9c:	5f 9b       	sbis	0x0b, 7	; 11
    1c9e:	eb cf       	rjmp	.-42     	; 0x1c76 <getch+0x10>
		/* HACKME:: here is a good place to count times*/
		count++;
		if (count > MAX_TIME_COUNT)
			app_start();
  }
  return (inb(UDR));
    1ca0:	8c b1       	in	r24, 0x0c	; 12
}
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	08 95       	ret

00001cac <getNch>:

void getNch(uint8_t count)
{
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	08 2f       	mov	r16, r24
    1cb2:	10 e0       	ldi	r17, 0x00	; 0
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <getNch+0xe>
  uint8_t i;
  for(i=0;i<count;i++) {
    /* m8 */
    //while(!(inb(UCSRA) & _BV(RXC)));
    //inb(UDR);
		getch(); // need to handle time out
    1cb6:	d7 df       	rcall	.-82     	; 0x1c66 <getch>
}

void getNch(uint8_t count)
{
  uint8_t i;
  for(i=0;i<count;i++) {
    1cb8:	1f 5f       	subi	r17, 0xFF	; 255
    1cba:	10 17       	cp	r17, r16
    1cbc:	e0 f3       	brcs	.-8      	; 0x1cb6 <getNch+0xa>
    /* m8 */
    //while(!(inb(UCSRA) & _BV(RXC)));
    //inb(UDR);
		getch(); // need to handle time out
  }
}
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	08 95       	ret

00001cc4 <byte_response>:

void byte_response(uint8_t val)
{
    1cc4:	1f 93       	push	r17
    1cc6:	18 2f       	mov	r17, r24
  if (getch() == ' ') {
    1cc8:	ce df       	rcall	.-100    	; 0x1c66 <getch>
    1cca:	80 32       	cpi	r24, 0x20	; 32
    1ccc:	31 f4       	brne	.+12     	; 0x1cda <byte_response+0x16>
    putch(0x14);
    1cce:	84 e1       	ldi	r24, 0x14	; 20
    1cd0:	c6 df       	rcall	.-116    	; 0x1c5e <putch>
    putch(val);
    1cd2:	81 2f       	mov	r24, r17
    1cd4:	c4 df       	rcall	.-120    	; 0x1c5e <putch>
    putch(0x10);
    1cd6:	80 e1       	ldi	r24, 0x10	; 16
    1cd8:	c2 df       	rcall	.-124    	; 0x1c5e <putch>
  }
}
    1cda:	1f 91       	pop	r17
    1cdc:	08 95       	ret

00001cde <nothing_response>:

void nothing_response(void)
{
  if (getch() == ' ') {
    1cde:	c3 df       	rcall	.-122    	; 0x1c66 <getch>
    1ce0:	80 32       	cpi	r24, 0x20	; 32
    1ce2:	21 f4       	brne	.+8      	; 0x1cec <nothing_response+0xe>
    putch(0x14);
    1ce4:	84 e1       	ldi	r24, 0x14	; 20
    1ce6:	bb df       	rcall	.-138    	; 0x1c5e <putch>
    putch(0x10);
    1ce8:	80 e1       	ldi	r24, 0x10	; 16
    1cea:	b9 cf       	rjmp	.-142    	; 0x1c5e <putch>
    1cec:	08 95       	ret

00001cee <main>:


void (*app_start)(void) = 0x0000;

int main(void)
{
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
  uint16_t w;

  //cbi(BL_DDR,BL);
  //sbi(BL_PORT,BL);

  asm volatile("nop\n\t");
    1cf6:	00 00       	nop
    //if(bit_is_set(BL_PIN,BL)) app_start();
  //}

  /* initialize UART(s) depending on CPU defined */
  /* m8 */
  UBRRH = (((F_CPU/BAUD_RATE)/16)-1)>>8; 	// set baud rate
    1cf8:	10 bc       	out	0x20, r1	; 32
  UBRRL = (((F_CPU/BAUD_RATE)/16)-1);
    1cfa:	8c e0       	ldi	r24, 0x0C	; 12
    1cfc:	89 b9       	out	0x09, r24	; 9
  UCSRB = (1<<RXEN)|(1<<TXEN);  // enable Rx & Tx
    1cfe:	88 e1       	ldi	r24, 0x18	; 24
    1d00:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);  // config USART; 8N1
    1d02:	86 e8       	ldi	r24, 0x86	; 134
    1d04:	80 bd       	out	0x20, r24	; 32
  //uint32_t l;
  //uint32_t time_count;
  //time_count=0;

  /* set LED pin as output */
  sbi(LED_DDR,LED);
    1d06:	bd 9a       	sbi	0x17, 5	; 23
	for (i = 0; i < 16; i++) {
    1d08:	10 92 68 01 	sts	0x0168, r1
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
		outb(LED_PORT, inb(LED_PORT) ^ _BV(LED));
    1d0e:	30 e2       	ldi	r19, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <main+0x36>
    1d16:	88 b3       	in	r24, 0x18	; 24
    1d18:	83 27       	eor	r24, r19
    1d1a:	88 bb       	out	0x18, r24	; 24
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <main+0x30>
    1d22:	2f 5f       	subi	r18, 0xFF	; 255
  //uint32_t time_count;
  //time_count=0;

  /* set LED pin as output */
  sbi(LED_DDR,LED);
	for (i = 0; i < 16; i++) {
    1d24:	20 31       	cpi	r18, 0x10	; 16
    1d26:	b8 f3       	brcs	.-18     	; 0x1d16 <main+0x28>
    1d28:	20 93 68 01 	sts	0x0168, r18

  /* forever */
  for (;;) {
    //if((inb(UCSRA) & _BV(RXC))){
    /* get character from UART */
		ch = getch();
    1d2c:	9c df       	rcall	.-200    	; 0x1c66 <getch>
		
		/* A bunch of if...else if... gives smaller code than switch...case ! */
	
		/* Hello is anyone home ? */ 
		if(ch=='0') {
    1d2e:	80 33       	cpi	r24, 0x30	; 48
    1d30:	81 f1       	breq	.+96     	; 0x1d92 <main+0xa4>
		}
	
		/* Request programmer ID */
		/* Not using PROGMEM string due to boot block in m128 being beyond 64kB boundry  */
		/* Would need to selectively manipulate RAMPZ, and it's only 9 characters anyway so who cares.  */
		else if(ch=='1') {
    1d32:	81 33       	cpi	r24, 0x31	; 49
    1d34:	99 f4       	brne	.+38     	; 0x1d5c <main+0x6e>
			if (getch() == ' ') {
    1d36:	97 df       	rcall	.-210    	; 0x1c66 <getch>
    1d38:	80 32       	cpi	r24, 0x20	; 32
    1d3a:	c1 f7       	brne	.-16     	; 0x1d2c <main+0x3e>
				putch(0x14);
    1d3c:	84 e1       	ldi	r24, 0x14	; 20
    1d3e:	8f df       	rcall	.-226    	; 0x1c5e <putch>
				putch('A');
    1d40:	81 e4       	ldi	r24, 0x41	; 65
    1d42:	8d df       	rcall	.-230    	; 0x1c5e <putch>
				putch('V');
    1d44:	86 e5       	ldi	r24, 0x56	; 86
    1d46:	8b df       	rcall	.-234    	; 0x1c5e <putch>
				putch('R');
    1d48:	82 e5       	ldi	r24, 0x52	; 82
    1d4a:	89 df       	rcall	.-238    	; 0x1c5e <putch>
				putch(' ');
    1d4c:	80 e2       	ldi	r24, 0x20	; 32
    1d4e:	87 df       	rcall	.-242    	; 0x1c5e <putch>
				putch('I');
    1d50:	89 e4       	ldi	r24, 0x49	; 73
    1d52:	85 df       	rcall	.-246    	; 0x1c5e <putch>
				putch('S');
    1d54:	83 e5       	ldi	r24, 0x53	; 83
    1d56:	83 df       	rcall	.-250    	; 0x1c5e <putch>
				putch('P');
    1d58:	80 e5       	ldi	r24, 0x50	; 80
    1d5a:	30 c1       	rjmp	.+608    	; 0x1fbc <block_done+0xc6>
				putch(0x10);
		  }
		}
	
		/* AVR ISP/STK500 board commands  DON'T CARE so default nothing_response */
		else if(ch=='@') {
    1d5c:	80 34       	cpi	r24, 0x40	; 64
    1d5e:	29 f4       	brne	.+10     	; 0x1d6a <main+0x7c>
		  ch2 = getch();
    1d60:	82 df       	rcall	.-252    	; 0x1c66 <getch>
		  if (ch2>0x85) getch();
    1d62:	86 38       	cpi	r24, 0x86	; 134
    1d64:	b0 f0       	brcs	.+44     	; 0x1d92 <main+0xa4>
    1d66:	7f df       	rcall	.-258    	; 0x1c66 <getch>
    1d68:	14 c0       	rjmp	.+40     	; 0x1d92 <main+0xa4>
		  nothing_response();
		}
	
		/* AVR ISP/STK500 board requests */
		else if(ch=='A') {
    1d6a:	81 34       	cpi	r24, 0x41	; 65
    1d6c:	71 f4       	brne	.+28     	; 0x1d8a <main+0x9c>
		  ch2 = getch();
    1d6e:	7b df       	rcall	.-266    	; 0x1c66 <getch>
		  if(ch2==0x80) byte_response(HW_VER);		// Hardware version
    1d70:	80 38       	cpi	r24, 0x80	; 128
    1d72:	11 f4       	brne	.+4      	; 0x1d78 <main+0x8a>
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	2a c1       	rjmp	.+596    	; 0x1fcc <block_done+0xd6>
		  else if(ch2==0x81) byte_response(SW_MAJOR);	// Software major version
    1d78:	81 38       	cpi	r24, 0x81	; 129
    1d7a:	11 f4       	brne	.+4      	; 0x1d80 <main+0x92>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	26 c1       	rjmp	.+588    	; 0x1fcc <block_done+0xd6>
		  else if(ch2==0x82) byte_response(SW_MINOR);	// Software minor version
    1d80:	82 38       	cpi	r24, 0x82	; 130
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <main+0x98>
    1d84:	22 c1       	rjmp	.+580    	; 0x1fca <block_done+0xd4>
    1d86:	82 e1       	ldi	r24, 0x12	; 18
    1d88:	21 c1       	rjmp	.+578    	; 0x1fcc <block_done+0xd6>
		  //else if(ch2==0x98) byte_response(0x03);		// Unknown but seems to be required by avr studio 3.56
		  else byte_response(0x00);				// Covers various unnecessary responses we don't care about
		}
	
		/* Device Parameters  DON'T CARE, DEVICE IS FIXED  */
		else if(ch=='B') {
    1d8a:	82 34       	cpi	r24, 0x42	; 66
    1d8c:	21 f4       	brne	.+8      	; 0x1d96 <main+0xa8>
		  getNch(20);
    1d8e:	84 e1       	ldi	r24, 0x14	; 20
    1d90:	8d df       	rcall	.-230    	; 0x1cac <getNch>
		  nothing_response();
    1d92:	a5 df       	rcall	.-182    	; 0x1cde <nothing_response>
    1d94:	cb cf       	rjmp	.-106    	; 0x1d2c <main+0x3e>
		}
	
		/* Parallel programming stuff  DON'T CARE  */
		else if(ch=='E') {
    1d96:	85 34       	cpi	r24, 0x45	; 69
    1d98:	11 f4       	brne	.+4      	; 0x1d9e <main+0xb0>
		  getNch(5);
    1d9a:	85 e0       	ldi	r24, 0x05	; 5
    1d9c:	f9 cf       	rjmp	.-14     	; 0x1d90 <main+0xa2>
		  nothing_response();
		}
	
		/* Enter programming mode  */
		else if(ch=='P') {
    1d9e:	80 35       	cpi	r24, 0x50	; 80
    1da0:	c1 f3       	breq	.-16     	; 0x1d92 <main+0xa4>
		  // FIXME: modified only here by DojoCorp, Mumbai, India, 20050626
		  //time_count=0; // exted the delay once entered prog.mode
		}
	
		/* Leave programming mode  */
		else if(ch=='Q') {
    1da2:	81 35       	cpi	r24, 0x51	; 81
    1da4:	b1 f3       	breq	.-20     	; 0x1d92 <main+0xa4>
												// therefore we just change the times
												// and give the programmer 1 sec to react
		}
	
		/* Erase device, don't care as we will erase one page at a time anyway.  */
		else if(ch=='R') {
    1da6:	82 35       	cpi	r24, 0x52	; 82
    1da8:	a1 f3       	breq	.-24     	; 0x1d92 <main+0xa4>
		}
	
		/* Set address, little endian. EEPROM in bytes, FLASH in words  */
		/* Perhaps extra address bytes may be added in future to support > 128kB FLASH.  */
		/* This might explain why little endian was used here, big endian used everywhere else.  */
		else if(ch=='U') {
    1daa:	85 35       	cpi	r24, 0x55	; 85
    1dac:	39 f4       	brne	.+14     	; 0x1dbc <main+0xce>
		  address.byte[0] = getch();
    1dae:	5b df       	rcall	.-330    	; 0x1c66 <getch>
    1db0:	80 93 64 00 	sts	0x0064, r24
		  address.byte[1] = getch();
    1db4:	58 df       	rcall	.-336    	; 0x1c66 <getch>
    1db6:	80 93 65 00 	sts	0x0065, r24
    1dba:	eb cf       	rjmp	.-42     	; 0x1d92 <main+0xa4>
		  nothing_response();
		}
	
		/* Universal SPI programming command, disabled.  Would be used for fuses and lock bits.  */
		else if(ch=='V') {
    1dbc:	86 35       	cpi	r24, 0x56	; 86
    1dbe:	19 f4       	brne	.+6      	; 0x1dc6 <main+0xd8>
		  getNch(4);
    1dc0:	84 e0       	ldi	r24, 0x04	; 4
    1dc2:	74 df       	rcall	.-280    	; 0x1cac <getNch>
    1dc4:	02 c1       	rjmp	.+516    	; 0x1fca <block_done+0xd4>
		  byte_response(0x00);
		}
	
		/* Write memory, length is big endian and is in bytes  */
		else if(ch=='d') {
    1dc6:	84 36       	cpi	r24, 0x64	; 100
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <main+0xde>
    1dca:	98 c0       	rjmp	.+304    	; 0x1efc <block_done+0x6>
		  length.byte[1] = getch();
    1dcc:	4c df       	rcall	.-360    	; 0x1c66 <getch>
    1dce:	80 93 67 01 	sts	0x0167, r24
		  length.byte[0] = getch();
    1dd2:	49 df       	rcall	.-366    	; 0x1c66 <getch>
    1dd4:	80 93 66 01 	sts	0x0166, r24
		  flags.eeprom = 0;
    1dd8:	80 91 69 01 	lds	r24, 0x0169
    1ddc:	8e 7f       	andi	r24, 0xFE	; 254
    1dde:	80 93 69 01 	sts	0x0169, r24
		  if (getch() == 'E') flags.eeprom = 1;
    1de2:	41 df       	rcall	.-382    	; 0x1c66 <getch>
    1de4:	85 34       	cpi	r24, 0x45	; 69
    1de6:	29 f4       	brne	.+10     	; 0x1df2 <main+0x104>
    1de8:	80 91 69 01 	lds	r24, 0x0169
    1dec:	81 60       	ori	r24, 0x01	; 1
    1dee:	80 93 69 01 	sts	0x0169, r24
    1df2:	00 e0       	ldi	r16, 0x00	; 0
    1df4:	10 e0       	ldi	r17, 0x00	; 0
    1df6:	07 c0       	rjmp	.+14     	; 0x1e06 <main+0x118>
		  for (w=0;w<length.word;w++) {
		    buff[w] = getch();	                        // Store data in buffer, can't keep up with serial data stream whilst programming pages
    1df8:	36 df       	rcall	.-404    	; 0x1c66 <getch>
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	ea 59       	subi	r30, 0x9A	; 154
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 83       	st	Z, r24
		else if(ch=='d') {
		  length.byte[1] = getch();
		  length.byte[0] = getch();
		  flags.eeprom = 0;
		  if (getch() == 'E') flags.eeprom = 1;
		  for (w=0;w<length.word;w++) {
    1e02:	0f 5f       	subi	r16, 0xFF	; 255
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	80 91 66 01 	lds	r24, 0x0166
    1e0a:	90 91 67 01 	lds	r25, 0x0167
    1e0e:	08 17       	cp	r16, r24
    1e10:	19 07       	cpc	r17, r25
    1e12:	90 f3       	brcs	.-28     	; 0x1df8 <main+0x10a>
		    buff[w] = getch();	                        // Store data in buffer, can't keep up with serial data stream whilst programming pages
		  }
		  if (getch() == ' ') {
    1e14:	28 df       	rcall	.-432    	; 0x1c66 <getch>
    1e16:	80 32       	cpi	r24, 0x20	; 32
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <main+0x12e>
    1e1a:	88 cf       	rjmp	.-240    	; 0x1d2c <main+0x3e>
				if (flags.eeprom) {		                //Write to EEPROM one byte at a time
    1e1c:	80 91 69 01 	lds	r24, 0x0169
    1e20:	80 ff       	sbrs	r24, 0
    1e22:	27 c0       	rjmp	.+78     	; 0x1e72 <main+0x184>
					for(w=0;w<length.word;w++) {
    1e24:	60 91 66 01 	lds	r22, 0x0166
    1e28:	70 91 67 01 	lds	r23, 0x0167
    1e2c:	20 91 64 00 	lds	r18, 0x0064
    1e30:	30 91 65 00 	lds	r19, 0x0065
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	12 c0       	rjmp	.+36     	; 0x1e5e <main+0x170>
    1e3a:	ac 01       	movw	r20, r24
    1e3c:	42 0f       	add	r20, r18
    1e3e:	53 1f       	adc	r21, r19
						eeprom_wb(address.word,buff[w]);
    1e40:	fc 01       	movw	r30, r24
    1e42:	ea 59       	subi	r30, 0x9A	; 154
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	e0 81       	ld	r30, Z
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    1e48:	e1 99       	sbic	0x1c, 1	; 28
    1e4a:	fe cf       	rjmp	.-4      	; 0x1e48 <main+0x15a>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
    1e4c:	5f bb       	out	0x1f, r21	; 31
    1e4e:	4e bb       	out	0x1e, r20	; 30
#endif
    EEDR = __value;
    1e50:	ed bb       	out	0x1d, r30	; 29

    __asm__ __volatile__ (
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	e2 9a       	sbi	0x1c, 2	; 28
    1e58:	e1 9a       	sbi	0x1c, 1	; 28
    1e5a:	0f be       	out	0x3f, r0	; 63
		  for (w=0;w<length.word;w++) {
		    buff[w] = getch();	                        // Store data in buffer, can't keep up with serial data stream whilst programming pages
		  }
		  if (getch() == ' ') {
				if (flags.eeprom) {		                //Write to EEPROM one byte at a time
					for(w=0;w<length.word;w++) {
    1e5c:	01 96       	adiw	r24, 0x01	; 1
    1e5e:	86 17       	cp	r24, r22
    1e60:	97 07       	cpc	r25, r23
    1e62:	58 f3       	brcs	.-42     	; 0x1e3a <main+0x14c>
    1e64:	26 0f       	add	r18, r22
    1e66:	37 1f       	adc	r19, r23
    1e68:	30 93 65 00 	sts	0x0065, r19
    1e6c:	20 93 64 00 	sts	0x0064, r18
    1e70:	43 c0       	rjmp	.+134    	; 0x1ef8 <block_done+0x2>
					//if (address.byte[1]>127) address_high = 0x01;	//Only possible with m128, m256 will need 3rd address byte. FIXME
					//else address_high = 0x00;
			
					//address.word = address.word << 1;	        //address * 2 -> byte location
					//if ((length.byte[0] & 0x01)) length.word++;	//Even up an odd number of bytes
					cli();					//Disable interrupts, just to be sure
    1e72:	f8 94       	cli
					while(bit_is_set(EECR,EEWE));			//Wait for previous EEPROM writes to complete
    1e74:	e1 99       	sbic	0x1c, 1	; 28
    1e76:	fe cf       	rjmp	.-4      	; 0x1e74 <main+0x186>
					asm volatile(
    1e78:	11 27       	eor	r17, r17
    1e7a:	e0 91 64 00 	lds	r30, 0x0064
    1e7e:	f0 91 65 00 	lds	r31, 0x0065
    1e82:	ee 0f       	add	r30, r30
    1e84:	ff 1f       	adc	r31, r31
    1e86:	c6 e6       	ldi	r28, 0x66	; 102
    1e88:	d0 e0       	ldi	r29, 0x00	; 0
    1e8a:	80 91 66 01 	lds	r24, 0x0166
    1e8e:	90 91 67 01 	lds	r25, 0x0167
    1e92:	80 ff       	sbrs	r24, 0
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <length_loop>
    1e96:	01 96       	adiw	r24, 0x01	; 1

00001e98 <length_loop>:
    1e98:	10 30       	cpi	r17, 0x00	; 0
    1e9a:	51 f4       	brne	.+20     	; 0x1eb0 <no_page_erase>
    1e9c:	22 d0       	rcall	.+68     	; 0x1ee2 <wait_spm>
    1e9e:	03 e0       	ldi	r16, 0x03	; 3
    1ea0:	00 93 57 00 	sts	0x0057, r16
    1ea4:	e8 95       	spm
    1ea6:	1d d0       	rcall	.+58     	; 0x1ee2 <wait_spm>
    1ea8:	01 e1       	ldi	r16, 0x11	; 17
    1eaa:	00 93 57 00 	sts	0x0057, r16
    1eae:	e8 95       	spm

00001eb0 <no_page_erase>:
    1eb0:	09 90       	ld	r0, Y+
    1eb2:	19 90       	ld	r1, Y+
    1eb4:	16 d0       	rcall	.+44     	; 0x1ee2 <wait_spm>
    1eb6:	01 e0       	ldi	r16, 0x01	; 1
    1eb8:	00 93 57 00 	sts	0x0057, r16
    1ebc:	e8 95       	spm
    1ebe:	13 95       	inc	r17
    1ec0:	10 32       	cpi	r17, 0x20	; 32
    1ec2:	58 f0       	brcs	.+22     	; 0x1eda <same_page>

00001ec4 <write_page>:
    1ec4:	11 27       	eor	r17, r17
    1ec6:	0d d0       	rcall	.+26     	; 0x1ee2 <wait_spm>
    1ec8:	05 e0       	ldi	r16, 0x05	; 5
    1eca:	00 93 57 00 	sts	0x0057, r16
    1ece:	e8 95       	spm
    1ed0:	08 d0       	rcall	.+16     	; 0x1ee2 <wait_spm>
    1ed2:	01 e1       	ldi	r16, 0x11	; 17
    1ed4:	00 93 57 00 	sts	0x0057, r16
    1ed8:	e8 95       	spm

00001eda <same_page>:
    1eda:	32 96       	adiw	r30, 0x02	; 2
    1edc:	02 97       	sbiw	r24, 0x02	; 2
    1ede:	39 f0       	breq	.+14     	; 0x1eee <final_write>
    1ee0:	db cf       	rjmp	.-74     	; 0x1e98 <length_loop>

00001ee2 <wait_spm>:
    1ee2:	00 91 57 00 	lds	r16, 0x0057
    1ee6:	01 70       	andi	r16, 0x01	; 1
    1ee8:	01 30       	cpi	r16, 0x01	; 1
    1eea:	d9 f3       	breq	.-10     	; 0x1ee2 <wait_spm>
    1eec:	08 95       	ret

00001eee <final_write>:
    1eee:	10 30       	cpi	r17, 0x00	; 0
    1ef0:	11 f0       	breq	.+4      	; 0x1ef6 <block_done>
    1ef2:	02 96       	adiw	r24, 0x02	; 2
    1ef4:	e7 cf       	rjmp	.-50     	; 0x1ec4 <write_page>

00001ef6 <block_done>:
    1ef6:	11 24       	eor	r1, r1
							 : "=m" (SPMCR) : "M" (PAGE_SIZE) : "r0","r16","r17","r24","r25","r28","r29","r30","r31");
			
					/* Should really add a wait for RWW section to be enabled, don't actually need it since we never */
					/* exit the bootloader without a power cycle anyhow */
				}
				putch(0x14);
    1ef8:	84 e1       	ldi	r24, 0x14	; 20
    1efa:	60 c0       	rjmp	.+192    	; 0x1fbc <block_done+0xc6>
				putch(0x10);
			}		
		}
	
		/* Read memory block mode, length is big endian.  */
		else if(ch=='t') {
    1efc:	84 37       	cpi	r24, 0x74	; 116
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <block_done+0xc>
    1f00:	50 c0       	rjmp	.+160    	; 0x1fa2 <block_done+0xac>
		  length.byte[1] = getch();
    1f02:	b1 de       	rcall	.-670    	; 0x1c66 <getch>
    1f04:	80 93 67 01 	sts	0x0167, r24
		  length.byte[0] = getch();
    1f08:	ae de       	rcall	.-676    	; 0x1c66 <getch>
    1f0a:	80 93 66 01 	sts	0x0166, r24
		  if (getch() == 'E') flags.eeprom = 1;
    1f0e:	ab de       	rcall	.-682    	; 0x1c66 <getch>
    1f10:	90 91 69 01 	lds	r25, 0x0169
    1f14:	85 34       	cpi	r24, 0x45	; 69
    1f16:	21 f4       	brne	.+8      	; 0x1f20 <block_done+0x2a>
    1f18:	91 60       	ori	r25, 0x01	; 1
    1f1a:	90 93 69 01 	sts	0x0169, r25
    1f1e:	0d c0       	rjmp	.+26     	; 0x1f3a <block_done+0x44>
		  else {
				flags.eeprom = 0;
    1f20:	9e 7f       	andi	r25, 0xFE	; 254
    1f22:	90 93 69 01 	sts	0x0169, r25
				address.word = address.word << 1;	        // address * 2 -> byte location
    1f26:	80 91 64 00 	lds	r24, 0x0064
    1f2a:	90 91 65 00 	lds	r25, 0x0065
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	90 93 65 00 	sts	0x0065, r25
    1f36:	80 93 64 00 	sts	0x0064, r24
		  }
		  if (getch() == ' ') {		                // Command terminator
    1f3a:	95 de       	rcall	.-726    	; 0x1c66 <getch>
    1f3c:	80 32       	cpi	r24, 0x20	; 32
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <block_done+0x4c>
    1f40:	f5 ce       	rjmp	.-534    	; 0x1d2c <main+0x3e>
				putch(0x14);
    1f42:	84 e1       	ldi	r24, 0x14	; 20
    1f44:	8c de       	rcall	.-744    	; 0x1c5e <putch>
    1f46:	00 e0       	ldi	r16, 0x00	; 0
    1f48:	10 e0       	ldi	r17, 0x00	; 0
    1f4a:	23 c0       	rjmp	.+70     	; 0x1f92 <block_done+0x9c>
				for (w=0;w < length.word;w++) {		        // Can handle odd and even lengths okay
					if (flags.eeprom) {	                        // Byte access EEPROM read
    1f4c:	80 91 69 01 	lds	r24, 0x0169
    1f50:	80 ff       	sbrs	r24, 0
    1f52:	0b c0       	rjmp	.+22     	; 0x1f6a <block_done+0x74>
						putch(eeprom_rb(address.word));
    1f54:	80 91 64 00 	lds	r24, 0x0064
    1f58:	90 91 65 00 	lds	r25, 0x0065
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1f5c:	e1 99       	sbic	0x1c, 1	; 28
    1f5e:	fe cf       	rjmp	.-4      	; 0x1f5c <block_done+0x66>
#if E2END <= 0xFF
    EEARL = (uint8_t)__p;
#else
    EEAR = (uint16_t)__p;
    1f60:	9f bb       	out	0x1f, r25	; 31
    1f62:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    1f64:	e0 9a       	sbi	0x1c, 0	; 28
    1f66:	8d b3       	in	r24, 0x1d	; 29
    1f68:	08 c0       	rjmp	.+16     	; 0x1f7a <block_done+0x84>
						address.word++;
					} else {	
						if (!flags.rampz) putch(pgm_read_byte_near(address.word));
    1f6a:	81 fd       	sbrc	r24, 1
    1f6c:	07 c0       	rjmp	.+14     	; 0x1f7c <block_done+0x86>
    1f6e:	e0 91 64 00 	lds	r30, 0x0064
    1f72:	f0 91 65 00 	lds	r31, 0x0065
    1f76:	e4 91       	lpm	r30, Z+
    1f78:	8e 2f       	mov	r24, r30
    1f7a:	71 de       	rcall	.-798    	; 0x1c5e <putch>
						address.word++;
    1f7c:	80 91 64 00 	lds	r24, 0x0064
    1f80:	90 91 65 00 	lds	r25, 0x0065
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	90 93 65 00 	sts	0x0065, r25
    1f8a:	80 93 64 00 	sts	0x0064, r24
				flags.eeprom = 0;
				address.word = address.word << 1;	        // address * 2 -> byte location
		  }
		  if (getch() == ' ') {		                // Command terminator
				putch(0x14);
				for (w=0;w < length.word;w++) {		        // Can handle odd and even lengths okay
    1f8e:	0f 5f       	subi	r16, 0xFF	; 255
    1f90:	1f 4f       	sbci	r17, 0xFF	; 255
    1f92:	80 91 66 01 	lds	r24, 0x0166
    1f96:	90 91 67 01 	lds	r25, 0x0167
    1f9a:	08 17       	cp	r16, r24
    1f9c:	19 07       	cpc	r17, r25
    1f9e:	b0 f2       	brcs	.-84     	; 0x1f4c <block_done+0x56>
    1fa0:	0e c0       	rjmp	.+28     	; 0x1fbe <block_done+0xc8>
				putch(0x10);
		  }
		}
	
		/* Get device signature bytes  */
		else if(ch=='u') {
    1fa2:	85 37       	cpi	r24, 0x75	; 117
    1fa4:	79 f4       	brne	.+30     	; 0x1fc4 <block_done+0xce>
		  if (getch() == ' ') {
    1fa6:	5f de       	rcall	.-834    	; 0x1c66 <getch>
    1fa8:	80 32       	cpi	r24, 0x20	; 32
    1faa:	09 f0       	breq	.+2      	; 0x1fae <block_done+0xb8>
    1fac:	bf ce       	rjmp	.-642    	; 0x1d2c <main+0x3e>
				putch(0x14);
    1fae:	84 e1       	ldi	r24, 0x14	; 20
    1fb0:	56 de       	rcall	.-852    	; 0x1c5e <putch>
				putch(SIG1);
    1fb2:	8e e1       	ldi	r24, 0x1E	; 30
    1fb4:	54 de       	rcall	.-856    	; 0x1c5e <putch>
				putch(SIG2);
    1fb6:	83 e9       	ldi	r24, 0x93	; 147
    1fb8:	52 de       	rcall	.-860    	; 0x1c5e <putch>
				putch(SIG3);
    1fba:	87 e0       	ldi	r24, 0x07	; 7
    1fbc:	50 de       	rcall	.-864    	; 0x1c5e <putch>
				putch(0x10);
    1fbe:	80 e1       	ldi	r24, 0x10	; 16
    1fc0:	4e de       	rcall	.-868    	; 0x1c5e <putch>
    1fc2:	b4 ce       	rjmp	.-664    	; 0x1d2c <main+0x3e>
		  }
		}
	
		/* Read oscillator calibration byte */
		else if(ch=='v') {
    1fc4:	86 37       	cpi	r24, 0x76	; 118
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <block_done+0xd4>
    1fc8:	b1 ce       	rjmp	.-670    	; 0x1d2c <main+0x3e>
		  byte_response(0x00);
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	7b de       	rcall	.-778    	; 0x1cc4 <byte_response>
    1fce:	ae ce       	rjmp	.-676    	; 0x1d2c <main+0x3e>

00001fd0 <_exit>:
    1fd0:	f8 94       	cli

00001fd2 <__stop_program>:
    1fd2:	ff cf       	rjmp	.-2      	; 0x1fd2 <__stop_program>

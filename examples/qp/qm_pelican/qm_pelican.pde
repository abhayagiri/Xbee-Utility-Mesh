//////////////////////////////////////////////////////////////////////////////
// Model: pelican.qm
// File:  ./qm_pelican.pde
//
// This file has been generated automatically by QP Modeler (QM).
// DO NOT EDIT THIS FILE MANUALLY.
//
// Please visit www.state-machine.com/qm for more information.
//////////////////////////////////////////////////////////////////////////////
#include "qp_port.h"
#include "pelican.h"
#include "bsp.h"

// Local-scope objects -------------------------------------------------------
static QEvent const *l_pelicanQueueSto[2];
static QEvent const *l_pedQueueSto[3];
static QSubscrList   l_subscrSto[MAX_PUB_SIG];

static union SmallEvents {
    void   *e0;                                          // minimum event size
    uint8_t e1[sizeof(QEvent)];
    // ... other event types to go into this pool
} l_smlPoolSto[10];                        // storage for the small event pool

//............................................................................
void setup() {
    BSP_init();                                          // initialize the BSP

    QF::init();       // initialize the framework and the underlying RT kernel

                                                  // initialize event pools...
    QF::poolInit(l_smlPoolSto, sizeof(l_smlPoolSto), sizeof(l_smlPoolSto[0]));

    QF::psInit(l_subscrSto, Q_DIM(l_subscrSto));     // init publish-subscribe

                                                // start the active objects...
    AO_Pelican->start(1, l_pelicanQueueSto, Q_DIM(l_pelicanQueueSto),
                      (void *)0, 0);
}

//////////////////////////////////////////////////////////////////////////////
// NOTE: Do not define the loop() function, because this function is
// already defined in the QP port to Arduino

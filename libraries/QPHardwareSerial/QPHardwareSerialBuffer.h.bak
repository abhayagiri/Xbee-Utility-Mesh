/* Modified by SVB to provide QP signaling on USART Rx */

/*
  QPHardwareSerial.h - Hardware serial library for Wiring
  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  Modified 28 September 2010 by Mark Sproul
*/

#ifndef QPHardwareSerial_h
#define QPHardwareSerial_h

#define HardwareSerial_h    //keep arduino standard serial offline
#define Serial QPSerial     //alias the arduino Serial references
#define Serial1 QPSerial1
#define Serial2 QPSerial2
#define Serial3 QPSerial3

#define QP_POST_METHOD
//#define QP_PUB_METHOD

#include <inttypes.h>

#include "Stream.h"

#include <qp_port.h>

struct QP_ring_buffer;

class QPHardwareSerial : public Stream
{
  private:
    QP_ring_buffer *_rx_buffer;
	#ifdef QP_POST_METHOD
	QActive * *_targetAO;
	#endif
	#if defined(QP_POST_METHOD) || defined (QP_PUB_MEHTOD)
	uint8_t *_signalID;
	bool *_eventOnRx;
	#endif
    volatile uint8_t *_ubrrh;
    volatile uint8_t *_ubrrl;
    volatile uint8_t *_ucsra;
    volatile uint8_t *_ucsrb;
    volatile uint8_t *_udr;
    uint8_t _rxen;
    uint8_t _txen;
    uint8_t _rxcie;
    uint8_t _udre;
    uint8_t _u2x;
  public:
    QPHardwareSerial( QP_ring_buffer *rx_buffer, 
					  #ifdef QP_POST_METHOD 
					  QActive * *targetAO,
					  #endif
					  #if defined(QP_POST_METHOD) || defined (QP_PUB_MEHTOD)
					  uint8_t *signalID,
					  bool *eventOnRx,
					  #endif
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *udr,
      uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x);
	#ifdef QP_POST_METHOD
    void begin(long baud, uint8_t bufferSize, uint8_t signalID, QActive * targetAO);
	#endif
	bool _master;
    void end();
    virtual int available(void);
    virtual int peek(void);
    virtual int read(void);
	virtual int read(String &str);
	virtual int read(char *buf, uint8_t len);
    virtual void flush(void);
    virtual void write(uint8_t);
    using Print::write; // pull in write(str) and write(buf, size) from Print
};

#if defined(UBRRH) || defined(UBRR0H)
  extern QPHardwareSerial QPSerial;
#elif defined(USBCON)
  #include "usb_api.h"
#endif
#if defined(UBRR1H)
  extern QPHardwareSerial QPSerial1;
#endif
#if defined(UBRR2H)
  extern QPHardwareSerial QPSerial2;
#endif
#if defined(UBRR3H)
  extern QPHardwareSerial QPSerial3;
#endif


#endif
